<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Espresso on Guowei Lv</title>
    <link>http://lvguowei.me/tags/espresso/</link>
    <description>Recent content in Espresso on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jul 2017 13:03:12 +0300</lastBuildDate>
    
	<atom:link href="http://lvguowei.me/tags/espresso/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>All You Need To Know About Android Espresso Testing (Part I)</title>
      <link>http://lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing/</link>
      <pubDate>Thu, 13 Jul 2017 13:03:12 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing/</guid>
      <description>The Espresso testing framework really makes it easy to write UI tests for Android. In this first installment, I will go through how to set it up and write our first test case.
Let&amp;rsquo;s get started.
Set up Espresso Add the following dependencies to your gradle build file.
dependencies { // Other dependencies ... androidTestCompile &amp;#39;com.android.support.test.espresso:espresso-core:2.2.2&amp;#39; }  Understand the Rules in JUnit Why do they exist? We all know that in JUnit there is a setup method(annotated as @Before) and a teardown method(annotated as @After).</description>
    </item>
    
  </channel>
</rss>