<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Guowei Lv</title>
    <link>http://lvguowei.me/tags/android/</link>
    <description>Recent content in Android on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jul 2017 14:47:36 +0300</lastBuildDate>
    
	<atom:link href="http://lvguowei.me/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android Custom Views 101 (Part III)</title>
      <link>http://lvguowei.me/post/android-custom-views-101-3/</link>
      <pubDate>Sat, 08 Jul 2017 14:47:36 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/android-custom-views-101-3/</guid>
      <description>In this post, we finally gonna take a look at how to implement onMeasure() properly.
When implementing a custom view, we should always consider its lower and upper size limit. In this case since the format of the time is fixed (hh:mm:ss). So we just need to get the width and height of it.
Suppose we set the MAX_TIME = &amp;quot;00:00:00&amp;quot;, then to get its width in pixel we can do:</description>
    </item>
    
    <item>
      <title>Android Custom Views 101 (Part II)</title>
      <link>http://lvguowei.me/post/android-custom-views-101-2/</link>
      <pubDate>Sat, 08 Jul 2017 09:55:03 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/android-custom-views-101-2/</guid>
      <description>In Part I, we talked about how to create a simple custom view. But we don&amp;rsquo;t really implement the onMeasure(). In this post, we will analyze what problems we will have if we omit the onMeasure().
You can think of how the measurements are made as a conversation between the child and parent views.
The child tells its parent how it wants to be laid out by using LayoutParams. This can either be set in xml file or programatically.</description>
    </item>
    
    <item>
      <title>Android Custom Views 101 (Part I)</title>
      <link>http://lvguowei.me/post/android-custom-view-101/</link>
      <pubDate>Wed, 05 Jul 2017 15:20:25 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/android-custom-view-101/</guid>
      <description>Creating your own custom android views can be useful and daunting at the same time. For a long time there is nobody really talks about it in a approachable way, until this lady Huyen Tue Dao. Let&amp;rsquo;s try to follow her approach and create some custom view!
In this part, we will create a very simple timer view that takes up the whole screen and display the current time.
 So let&amp;rsquo;s get started.</description>
    </item>
    
    <item>
      <title>Why we stopped using dagger and some thoughts</title>
      <link>http://lvguowei.me/post/why-remove-dagger/</link>
      <pubDate>Tue, 27 Jun 2017 20:40:41 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/why-remove-dagger/</guid>
      <description>I decided to stop using Dagger2 in our company&amp;rsquo;s android project. Why?
Don&amp;rsquo;t get me wrong, Dagger2 is still great. But though it is great, it is complex. Lots of concepts to wrap our heads around. What is a component, what is a module, what is the difference between subcomponent and dependency component, etc. In order to use it properly, we need to anwser all that questions, even you think you understand it, you still run into suprises now and then.</description>
    </item>
    
    <item>
      <title>An Android version of the iMessage voice note recorder</title>
      <link>http://lvguowei.me/post/imessage-recorder-android-clone/</link>
      <pubDate>Mon, 12 Jun 2017 12:22:15 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/imessage-recorder-android-clone/</guid>
      <description>I created a copy of the voice recorder in the iMessage app for android and made a library out of it. Check it out here!
 </description>
    </item>
    
    <item>
      <title>Android Kata View Property Animator</title>
      <link>http://lvguowei.me/post/android-kata-view-property-animator/</link>
      <pubDate>Tue, 28 Mar 2017 20:49:08 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/android-kata-view-property-animator/</guid>
      <description>Since I have been doing programming kata, why not adopt the same kata concept in Android programming?
Over the years I have accumulated some useful tools / tricks that I can show in kata form.
The goal is to keep it simple and easy to grasp and to the point.
This is the first one, which shows how to use ViewPropertyAnimator to animate show and hide of the FAB button.</description>
    </item>
    
    <item>
      <title>My Second Android Library</title>
      <link>http://lvguowei.me/post/second-android-lib/</link>
      <pubDate>Mon, 26 Dec 2016 10:23:15 +0200</pubDate>
      
      <guid>http://lvguowei.me/post/second-android-lib/</guid>
      <description>I published my second android library project, a date and time picker dialog that mimic the one in Google Map app.
Go check it out here!
 </description>
    </item>
    
    <item>
      <title>My first Android library!</title>
      <link>http://lvguowei.me/post/first-android-lib/</link>
      <pubDate>Fri, 23 Dec 2016 12:25:51 +0200</pubDate>
      
      <guid>http://lvguowei.me/post/first-android-lib/</guid>
      <description>I published my first android library for creating customized progressbar.
Go check here!
 </description>
    </item>
    
    <item>
      <title>Use Interface Segregation Principle to Implement an Android Logger</title>
      <link>http://lvguowei.me/post/interface-segregation-principle-android-logger/</link>
      <pubDate>Thu, 08 Dec 2016 21:34:15 +0200</pubDate>
      
      <guid>http://lvguowei.me/post/interface-segregation-principle-android-logger/</guid>
      <description>Recently at work we has been talking about implementing some kind of Analytic interface for all the analytic libraries we are using, like Localytics and Firebase and so on. Basically it is just a fat interface with a long list of event logging functions, like logSignIn(), logSignOut(), logSellProduct(), logOpenMap() and so on. There are about 40 such methods in that interface. So this is how we implemented it in the first place.</description>
    </item>
    
    <item>
      <title>Duplicate Observed Data</title>
      <link>http://lvguowei.me/post/duplicate-observed-data/</link>
      <pubDate>Sat, 15 Oct 2016 05:35:31 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/duplicate-observed-data/</guid>
      <description>This is from the famous Refactoring book by Martin Fowler. When I was reading it, it feels very similar to the very popular MVP or MVVM.
The key idea is that in system that has user interface, the business logic should be separated from the user interface.
One example I can think of is the registration form, where there are input fields like username, email, phone number and password. We can have some logic that disable the Register button until all fields are filled and the phone number and email valid.</description>
    </item>
    
  </channel>
</rss>