<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on Guowei Lv</title>
    <link>http://lvguowei.me/tags/refactoring/</link>
    <description>Recent content in Refactoring on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Oct 2016 09:40:46 +0300</lastBuildDate>
    <atom:link href="http://lvguowei.me/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unidirectional to Bidirectional</title>
      <link>http://lvguowei.me/post/unidirectional-to-bidirectional/</link>
      <pubDate>Sat, 15 Oct 2016 09:40:46 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/unidirectional-to-bidirectional/</guid>
      <description>&lt;p&gt;It is very common in relational database that we have the following structure:
A customer table has columns: customer-id, name.
And an order table has columns: order-id, customer-id, order-date.&lt;/p&gt;

&lt;p&gt;See that there is a customer-id in the order table, so that we can use it to get orders belongs to
a certain customer. But there is no knowledge about the orders in customer table.&lt;/p&gt;

&lt;p&gt;This is fine with database, but if we try to map this directly to java classes, we may end up with something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Customer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createdAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But what if we want to get all orders of a customer? It would be very convinient if there is a
orders field in the customer, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;Well, this is all this refactoring all about.&lt;/p&gt;

&lt;p&gt;But pay attention how to keep the data synced.&lt;/p&gt;

&lt;p&gt;Here is the code:
&lt;a href=&#34;https://github.com/lvguowei/refactoring/tree/master/unidirectionalToBidirectional&#34; title=&#34;Github&#34;&gt;Sample Project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplicate Observed Data</title>
      <link>http://lvguowei.me/post/duplicate-observed-data/</link>
      <pubDate>Sat, 15 Oct 2016 05:35:31 +0300</pubDate>
      
      <guid>http://lvguowei.me/post/duplicate-observed-data/</guid>
      <description>&lt;p&gt;This is from the famous Refactoring book by Martin Fowler. When I was reading it, it feels very similar to the very popular MVP or MVVM.&lt;/p&gt;

&lt;p&gt;The key idea is that in system that has user interface, the business logic should be separated from the user interface.&lt;/p&gt;

&lt;p&gt;One example I can think of is the registration form, where there are input fields like username, email, phone number and password.
We can have some logic that disable the Register button until all fields are filled and the phone number and email valid.
We can of course put everything in the UI (probably an Activity or Fragment in Android), but it doesn&amp;rsquo;t feel very elegant.
So we create a new RegisterModel class, create 4 private String fields - username, email, phone number and password.
Then we create getter and setter for these fields. When in the Activity the user changed one of the fields, we directly call the
corresponding setter function in the model, and the model can do the calculation and validation and whatnot, then use some PubSub
mechanism to notify the view.&lt;/p&gt;

&lt;p&gt;I created an Android project out of the example in the book.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lvguowei/refactoring/tree/master/DuplicateObservedData&#34; title=&#34;Github&#34;&gt;Android Example&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>